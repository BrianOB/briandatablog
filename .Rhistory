all_jobs_clustered
all_jobs_clustered <- employment_ann_total %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster),alpha=.5) +
geom_smooth(se=FALSE,method='gam', formula= y~s(x,bs='cs')) +
# highlight Pittsburgh MSA
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann_total,area_code=='38300'),
size=1) +
scale_color_manual(labels=c('Moderate loss', 'Moderate gain', 'High loss', 'High gain',"Pittsburgh (slightly better)"),
values=c('pink','lightgreen','red','darkgreen','yellow')) +
scale_x_continuous(breaks=seq(2006, 2017,1)) +
labs(title = "Metro job growth",
y="Total nonfarm payroll employment",
subtitle="(Indexed to 2006)",
x="") +
bbc_style() +
theme(legend.position='bottom', legend.title=element_blank()) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=2)))
all_jobs_clustered
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
setwd("c:/users/brian/documents/Projects/metro_analysis")
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
all_jobs_clustered <- employment_ann_total %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster),alpha=.5) +
geom_smooth(se=FALSE,method='gam', formula= y~s(x,bs='cs')) +
# highlight Pittsburgh MSA
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann_total,area_code=='38300'),
size=1) +
scale_color_manual(labels=c('Moderate loss', 'Moderate gain', 'High loss', 'High gain',"Pittsburgh (slightly better)"),
values=c('pink','lightgreen','red','darkgreen','yellow')) +
scale_x_continuous(breaks=seq(2006, 2017,1)) +
labs(title = "Metro job growth",
y="Total nonfarm payroll employment",
subtitle="(Total nonfarm payroll jobs indexed to 2006)",
x="") +
bbc_style() +
theme(legend.position='bottom', legend.title=element_blank()) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=2)))
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
all_jobs_clustered <- employment_ann_total %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster),alpha=.5) +
geom_smooth(se=FALSE,method='gam', formula= y~s(x,bs='cs')) +
# highlight Pittsburgh MSA
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann_total,area_code=='38300'),
size=1) +
scale_color_manual(labels=c('Moderate loss', 'Moderate gain', 'High loss', 'High gain',"Pittsburgh (slightly better)"),
values=c('pink','lightgreen','red','darkgreen','yellow')) +
scale_x_continuous(breaks=seq(2006, 2017,1)) +
labs(title = "Metro job growth",
y="Total nonfarm payroll employment",
subtitle="(Total nonfarm payroll jobs indexed to 2006)",
x="") +
bbc_style() +
theme(legend.position='bottom', legend.title=element_blank(),
legend.text=element_text(size=8)) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=2)))
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
all_jobs_clustered <- employment_ann_total %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster),alpha=.5) +
geom_smooth(se=FALSE,method='gam', formula= y~s(x,bs='cs')) +
# highlight Pittsburgh MSA
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann_total,area_code=='38300'),
size=1) +
scale_color_manual(labels=c('Moderate loss', 'Moderate gain', 'High loss', 'High gain',"Pittsburgh (slightly better)"),
values=c('pink','lightgreen','red','darkgreen','yellow')) +
scale_x_continuous(breaks=seq(2006, 2017,1)) +
labs(title = "Metro job growth",
y="Total nonfarm payroll employment",
subtitle="(Total nonfarm payroll jobs indexed to 2006)",
x="") +
bbc_style() +
theme(legend.position='bottom', legend.title=element_blank(),
legend.text=element_text(size=10)) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=2)))
finalise_plot(all_jobs_clustered,source_name="Data from Bureau of Labor Statistics",
save_filepath = 'metro_job_index.png')
help()
install.packages("babynames")
install.packages("backports")
install.packages("backports")
install.packages('backports')
install.packages("backports")
install.packages("BH")
install.packages('quantmod')
library(quantmod)
import.packages('dygraphs')
install.packages('dygraphs')
library(dygraphs)
google_stock_prices <- getSymbols("GOOG", src = "yahoo", from = "2008-01-01",
auto.assign = FALSE)
chartSeries(google_stock_prices)
dygraph(google_stock_prices[,c("GOOG.Close")],
main = "Google Stock Price Starting in 2008")
sfincome <- getSymbols("MHICA06075A052NCEN", src="FRED", auto.assign = FALSE)
names(sfincome) <- "Income"
dygraph(sfincome, main = "San Francisco Median Household Income")
sfmediangraph <- dygraph(sfincome, main = "San Francisco Median Household Income")
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(quantmod)
library(dygraphs)
library(htmlwidgets)
setwd("c:/users/brian/documents/CAR/R work directory")
saveWidget(sfmediangraph, file="sfmediangraph.html")
usincome <- getSymbols("MHIUS00000A052NCEN", src="FRED")
names(usincome) <- "US Income"
mygraphdata <- cbind(sfincome, usincome)
dygraph(mygraphdata, main = "Median Household Income")
usincome <- getSymbols("MHIUS00000A052NCEN", src="FRED")
sfincome <- getSymbols("MHICA06075A052NCEN", src="FRED", auto.assign = FALSE)
usincome <- getSymbols("MHIUS00000A052NCEN", src="FRED")
library(quantmod)
library(dygraphs)
usincome <- getSymbols("MHIUS00000A052NCEN", src="FRED")
usincome <- getSymbols("MHIUS00000A052NCEN", src="FRED", auto.assign=FALSE)
names(usincome) <- "US Income"
mygraphdata <- cbind(sfincome, usincome)
dygraph(mygraphdata, main = "Median Household Income")
type(sfincome)
class(sfincome)
sfunemp <- getSymbols("SANF806UR", src="FRED", auto.assign = FALSE)
names(sfunemp) <- "SFRate"
usunemp <- getSymbols("UNRATE", src="FRED", auto.assign = FALSE)
names(usunemp) <- "USRate"
unemploymentdata <- cbind(sfunemp, usunemp)
dygraph(unemploymentdata, main = "Monthly Unemployment Rates, US and San Francisco")
unemploymentdata <- unemploymentdata["1990/"]
dygraph(unemploymentdata, main = "Monthly Unemployment Rates, US and San Francisco")
library(rio)
install_formats()
library(rio)
download.file("http://bit.ly/BostonSnowfallCSV", "BostonWinterSnowfalls.csv")
snowdata <- rio::import("BostonWinterSnowfalls.csv")
snowdata <- rio::import("http://bit.ly/BostonSnowfallCSV", format = "csv")
isntall.packages('htmltab')
install.packages('htmltab')
library(htmltab)
citytable <- htmltab("https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population")
str(citytable)
View(citytable)
citytable <- htmltab("https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population", which=5)
str(citytable)
head(citytable)
library(tidyverse)
library(readr)
path_county <- 'C:/Users/Brian/Documents/Projects/pa_counties'
path_muni <- 'C:/Users/Brian/Documents/Projects/pa_municipalities'
# county data
county_files <- list(ls(pattern=paste0(path_county,'Statewide*')))
county_files
county_files <- ls(pattern=paste0(path_county,'Statewide*'))
# county data
county_files <- ls(pattern=paste0(path_county,'Statewide*'))
path_county <- 'C:/Users/Brian/Documents/Projects/pa_counties/'
path_muni <- 'C:/Users/Brian/Documents/Projects/pa_municipalities/'
# county data
county_files <- ls(pattern=paste0(path_county,'Statewide*'))
ls(pattern=path_county)
ls(pattern=paste0(path_county,'*.*'))
ls(pattern=paste0(path_county,'*'))
path_county
ls(pattern="*")
# county data
county_files <- list.files(pattern=paste0(path_county,'Statewide*'))
list.files(pattern=paste0(path_county,'*'))
list.files("*")
list.files("*.*")
list.files()
list.files(".*")
list.files(".*\\..*")
list.files(pattern=".*\\..*")
# county data
county_files <- list.files(pattern=paste0(path_county,'Statewide.*\\.csv'))
list.files(pattern=paste0(path_county,'.*\\..*'))
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.csv')
list.files(path=path_county)
list.files(path=path_county,pattern="St.*")
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*')
data_county <- map(county_files, readr)
data_county <- map(county_files, read_csv)
?readxl
data_county <- map(county_files, read_excel)
data_county <- map(county_files, readxl::read_excel)
View(data_county)
county_files <- list.files(path=path_county, pattern='Statewide.*',full.names=T)
data_county <- map(county_files, readxl::read_excel)
View(data_county)
test <- readxl::read_excel(county_files[1])
test <- readxl::read_xls(county_files[1])
View(test)
test <- readxl::read_xls(county_files[2])
test <- readxl::read_xls(paste0(path_county,'StatewideCountyAfr18.xls'))
test <- readxl::read_xls(paste0(path_county,'StatewideCountyAfr18.xls'))
setwd(path_county)
test <- readxl::read_xls('StatewideCountyAfr18.xls')
test <- readxl::read_xls('StatewideCou.xls')
test <- readxl::read_xls('StatewideCountyAfr18.xls')
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.txt',full.names=T)
data_county <- map(county_files, readxl::read_excel)
county_files
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.txt',full.names=T)
data_county <- map(county_files, read_tsv)
View(data_county)
View(data_county)
data_county <- map_df(county_files, read_tsv)
View(data_county)
names(data_county) <- make.names(data_county)
View(data_county)
data_county <- map_df(county_files, read_tsv)
names(data_county)
names(data_county) <- make.names(names(data_county))
names(data_county)
new_names <- names(data_county)
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names
new_names <- tolower(new_names)
new_names
data_county <- map_df(county_files, read_tsv)
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf')
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names
new_names <- gsub(pattern='^fiduciary_funds','pf',new_names)
new_names
# fix column names
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names <- gsub(pattern='^fiduciary_funds','ff',new_names)
new_names
new_names <- gsub(pattern='^internal_fund','ff',new_names)
# fix column names
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names <- gsub(pattern='^fiduciary_funds','ff',new_names)
new_names <- gsub(pattern='^internal_fund','if',new_names)
new_names
new_names <- gsub(pattern='^internal_service_fund','isf',new_names)
new_names
new_names <- gsub(pattern='^proprietaryfunds','pf',new_names)
new_names
names(data_county) <- new_names
View(data_county)
data_county %>%
gather(category, amount)
View(data_county)
# tidy it up
data_county %>%
gather(category, amount, -municipality_id, -municipality_name)
# tidy it up
data_county %>%
gather(category, amount, -municipality_id, -municipality_name, -reporting_year)
# tidy it up
data_county %>%
gather(category, amount, -municipality_id, -municipality_name, -reporting_year, -afr_id)
glipse(data_county)
glimpse(data_county)
# tidy it up
data_county <- data_county %>%
gather(category, amount, -municipality_id, -municipality_name, -reporting_year, -afr_id)
glimpse(data_county)
data_county %>%
filter(municipality_name=='ALLEGHENY COUNTY') %>%
group_by(afr_id) %>%
count()
library(tidyverse)
library(readr)
path_county <- 'C:/Users/Brian/Documents/Projects/pa_counties/'
path_muni <- 'C:/Users/Brian/Documents/Projects/pa_municipalities/'
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.txt',full.names=T)
data_county <- map_df(county_files, read_tsv)
# fix column names
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names <- gsub(pattern='^proprietaryfunds','pf',new_names)
new_names <- gsub(pattern='^fiduciary_funds','ff',new_names)
new_names <- gsub(pattern='^internal_fund','if',new_names)
new_names <- gsub(pattern='^internal_service_fund','isf',new_names)
names(data_county) <- new_names
# tidy it up
data_county <- data_county %>%
gather(category, amount, -municipality_id, -municipality_name, -reporting_year, -afr_id)
glimpse(data_county)
data_county %>%
filter(afr_id == 25814) %>%
group_by(municipality_name) %>%
count()
data_county %>%
filter(municipality_name=='ALLEGHENY COUNTY') %>%
group_by(reporting_year, afr_id) %>%
count()
summary(data_county)
data_county %>%
filter(category=='taxes_per_capita') %>%
group_by(reporting_year) %>%
summarise(avg = mean(value))
data_county %>%
filter(category=='taxes_per_capita') %>%
group_by(reporting_year) %>%
summarise(avg = mean(amount))
data_county %>%
filter(category=='taxes_per_capita') %>%
group_by(reporting_year) %>%
summarise(avg = mean(amount,na.rm=T))
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.txt',full.names=T)
data_county <- map_df(county_files, read_tsv)
# fix column names
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names <- gsub(pattern='^proprietaryfunds','pf',new_names)
new_names <- gsub(pattern='^fiduciary_funds','ff',new_names)
new_names <- gsub(pattern='^internal_fund','if',new_names)
new_names <- gsub(pattern='^internal_service_fund','isf',new_names)
names(data_county) <- new_names
# narrow
data_county_n <- data_county %>%
gather(category, amount, -municipality_id, -municipality_name, -reporting_year, -afr_id)
glimpse(data_county)
data_county %>%
filter(municipality_name=='ALLEGHENY COUNTY') %>%
group_by(reporting_year, afr_id) %>%
count()
data_county %>%
filter(afr_id == 25814) %>%
group_by(municipality_name) %>%
count()
summary(data_county)
glimpse(data_county)
data_county$gf_revenues
data_county %>%
select_if(function(x) all(is.na(x)))
data_county <- data_county %>%
select(-gf_revenues, -gf_expenditures, -pf, -ff, -miscellanous_information)
data_county %>%
group_by(reporting_year) %>%
summarise(med_tax_per_cap = median(taxes_per_capita))
data_county %>%
group_by(reporting_year) %>%
summarise(med_tax_per_cap = median(taxes_per_capita,na.rm=T))
data_county %>%
filter(municipality_name=='ALLEGHENY COUNTY') %>%
group_by(reporting_year, afr_id) %>%
count()
data_county %>%
filter(is.na(taxes_per_capita))
library(tidyverse)
library(readr)
path_county <- 'C:/Users/Brian/Documents/Projects/pa_counties/'
path_muni <- 'C:/Users/Brian/Documents/Projects/pa_municipalities/'
# county data
county_files <- list.files(path=path_county, pattern='Statewide.*\\.txt',full.names=T)
data_county <- map_df(county_files, read_tsv)
# fix column names
new_names <- make.names(names(data_county))
new_names <- gsub(pattern="\\.", replacement="_", x=new_names)
new_names <- tolower(new_names)
new_names <- gsub(pattern='^governmental_funds','gf',new_names)
new_names <- gsub(pattern='^governmental_fund','gf',new_names)
new_names <- gsub(pattern='^proprietary_funds','pf',new_names)
new_names <- gsub(pattern='^proprietaryfunds','pf',new_names)
new_names <- gsub(pattern='^fiduciary_funds','ff',new_names)
new_names <- gsub(pattern='^internal_fund','if',new_names)
new_names <- gsub(pattern='^internal_service_fund','isf',new_names)
names(data_county) <- new_names
glimpse(data_county)
data_county %>%
select_if(function(x) all(is.na(x)))
data_county <- data_county %>%
select(-gf_revenues, -gf_expenditures, -pf, -ff, -miscellanous_information)
data_county %>%
group_by(reporting_year) %>%
summarise(med_tax_per_cap = median(taxes_per_capita,na.rm=T))
data_county %>%
filter(municipality_name == 'ALLEGHENY COUNTY',reporting_year==2016)
setwd("c:/users/brian/documents/Projects/pa_counties")
blogdown:::serve_site()
blogdown:::new_post_addin()
library(tidyverse)
library(DT)
load('C:/Users/Brian/Documents/Projects/pa_local_gov/data_county_web.RData')
data_county_web %>%
datatable(extensions= "FixedColumns",
options=list(scrollX = TRUE, fixedColumns=list(leftColumns=2)),
colnames=c('County','Total general fund revnues','From taxes','From federal','From state','From other local')) %>%
formatCurrency(3,digits=0) %>%
formatPercentage(4:7,digits=1)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(tidyverse)
library(scales)
library(reshape2)
library(DT)
blogdown:::serve_site()
blogdown:::new_post_addin()
save(q1_by_q2.RData)
library(tidyverse)
library(haven)
# load data
sept18 <- read_sav('c:/users/brian/documents/mystuff/projects/api_stuff/data_raw/Sept18 public.sav', user_na = T) %>%
as_factor()
# create survey design
sept18_design = svydesign(
ids = ~0, #formula indicating there are no clusters
data = sept18,      #this is the dataset
weights = ~weight) #this is the 'weight' variable from the dataset
library(tidyverse)
library(haven)
library(survey)
# load data
sept18 <- read_sav('c:/users/brian/documents/mystuff/projects/api_stuff/data_raw/Sept18 public.sav', user_na = T) %>%
as_factor()
# create survey design
sept18_design = svydesign(
ids = ~0, #formula indicating there are no clusters
data = sept18,      #this is the dataset
weights = ~weight) #this is the 'weight' variable from the dataset
# get q1 by q2
q1_by_q2 = svyby(~q2,            #variable to estimate
~q1,          #subgroup variable
design = sept18_design,
FUN = svymean, #function to use on each subgroup
keep.names = FALSE #does not include row.names
#for subgroup variable
)
# clean it up
q1_by_q2 <- q1_by_q2 %>%
select(q1, Approve = q2Approve, Disapprove = q2Disapprove, "Don't know/Refused" = `q2(VOL) Don't know/Refused`) %>%
gather(key=q2, value=Percent, Approve, Disapprove, `Don't know/Refused`)
levels(q1_by_q2$q1) <- c('Satisfied','Dissatisfied',"Don't know/Refused")
# plot it
q1_by_q2 %>% ggplot(aes(x=q1, y=Percent, group=q2, fill=q2)) +
geom_col(position='dodge') +
scale_fill_manual(values=c('green','red','orange')) +
scale_y_continuous(labels=scales::percent) +
labs(title="Trump approval by how satisfied people are with the country's direction",
x='All in all, are you satisfied or dissatisfied with the way things are going in this country today?',
subtitle='Do you approve or disapprove of the way Donald Trump is handling his job as President?') +
theme(legend.title = element_blank())
library(tidyverse)
library(haven)
library(survey)
# load data
sept18 <- read_sav('c:/users/brian/documents/mystuff/projects/api_stuff/data_raw/Sept18 public.sav', user_na = T) %>%
as_factor()
# create survey design
sept18_design = svydesign(
ids = ~0, #formula indicating there are no clusters
data = sept18,      #this is the dataset
weights = ~weight) #this is the 'weight' variable from the dataset
# get q1 by q2
q1_by_q2 = svyby(~q2,            #variable to estimate
~q1,          #subgroup variable
design = sept18_design,
FUN = svymean, #function to use on each subgroup
keep.names = FALSE #does not include row.names
#for subgroup variable
)
# clean it up
q1_by_q2 <- q1_by_q2 %>%
select(q1, Approve = q2Approve, Disapprove = q2Disapprove, "Don't know/Refused" = `q2(VOL) Don't know/Refused`) %>%
gather(key=q2, value=Percent, Approve, Disapprove, `Don't know/Refused`)
levels(q1_by_q2$q1) <- c('Satisfied','Dissatisfied',"Don't know/Refused")
# plot it
q1_by_q2 %>% ggplot(aes(x=q1, y=Percent, group=q2, fill=q2)) +
geom_col(position='dodge') +
scale_fill_manual(values=c('green','red','orange')) +
scale_y_continuous(labels=scales::percent) +
labs(title="Trump approval by how satisfied people are with the country's direction",
x='All in all, are you satisfied or dissatisfied with the way things are going in this country today?',
subtitle='Do you approve or disapprove of the way Donald Trump is handling his job as President?') +
theme(legend.title = element_blank(), plot.subtitle=element_text(size=10))
