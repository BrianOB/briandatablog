geom_line(aes(group=area_code, color=cluster), alpha=.5) +
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann, area_code == '38300'),
size=1.5) +
geom_line(aes(x=year, y=mean_index, color='blue'), size=1) +
scale_color_manual(labels=c(A='Slightly Worse', B='Slightly Better', C='Much worse', D='Much better',blue='Metro average', yellow='Pittsburgh'),
values=c(A='pink',B='lightgreen',C='red',D='darkgreen',blue='blue',yellow='yellow'),
aesthetics='colour') +
scale_x_continuous(breaks=seq(2006, 2018,1)) +
labs(title = "Metro job growth",
y="Job growth index",
subtitle="(Average annual total nonfarm payroll employment indexed to 2006)",
x="") +
theme_minimal() +
theme(plot.title=element_text(size=24),
legend.position='bottom', legend.title=element_blank(),
legend.box.background = element_rect(fill='grey80')) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=1)))
all_jobs_clustered
# graphs
all_jobs_clustered <- employment_ann %>%
left_join(employment_ann %>%
group_by(year) %>%
summarise(mean_index = mean(job_index)),
by='year') %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster), alpha=.5) +
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann, area_code == '38300'),
size=1.5) +
geom_line(aes(x=year, y=mean_index, color='blue'), size=1) +
scale_color_manual(labels=c(A='Slightly Worse', B='Slightly Better', C='Much worse', D='Much better',blue='Metro average', yellow='Pittsburgh'),
values=c(A='pink',B='lightgreen',C='red',D='darkgreen',blue='blue',yellow='yellow'),
aesthetics='colour') +
scale_x_continuous(breaks=seq(2006, 2018,1)) +
labs(title = "Metro job growth",
y="Job growth index",
subtitle="(Average annual total nonfarm payroll employment indexed to 2006)",
x="") +
theme_minimal() +
theme(plot.title=element_text(size=24),
legend.position='bottom', legend.title=element_blank(),
legend.box.background = element_rect(fill='gray80')) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=1)))
all_jobs_clustered
# graphs
all_jobs_clustered <- employment_ann %>%
left_join(employment_ann %>%
group_by(year) %>%
summarise(mean_index = mean(job_index)),
by='year') %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster), alpha=.5) +
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann, area_code == '38300'),
size=1.5) +
geom_line(aes(x=year, y=mean_index, color='blue'), size=1) +
scale_color_manual(labels=c(A='Slightly Worse', B='Slightly Better', C='Much worse', D='Much better',blue='Metro average', yellow='Pittsburgh'),
values=c(A='pink',B='lightgreen',C='red',D='darkgreen',blue='blue',yellow='yellow'),
aesthetics='colour') +
scale_x_continuous(breaks=seq(2006, 2018,1)) +
labs(title = "Metro job growth",
y="Job growth index",
subtitle="(Average annual total nonfarm payroll employment indexed to 2006)",
x="") +
theme_minimal() +
theme(plot.title=element_text(size=24),
legend.position='bottom', legend.title=element_blank(),
legend.box.background = element_rect(fill='gray90')) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=1)))
all_jobs_clustered
animate(all_jobs_clustered + transition_reveal(year), end_pause = 20)
blogdown:::serve_site()
# libraries
library(tidyverse)
library(readr)
library(kml)
library(scales)
library(lubridate)
library(fredr)
library(cowplot)
library(data.table)
library(gganimate)
# data files need to be updated
# the metro_handler.Rmd file in the metro_analysis project does this.
load(file='C:/Users/bowli/Documents/Projects/metro_analysis/data_processed/employment_ann.RData')
load(file='C:/Users/bowli/Documents/Projects/metro_analysis/data_processed/codes.RData')
# add text labels
employment_ann <- merge(code_state,employment_ann)
employment_ann <- merge(code_area, employment_ann)
employment_ann <- merge(code_supersector, employment_ann)
employment_ann <- merge(code_industry, employment_ann)
# reorder columns
employment_ann <- employment_ann %>%
select(state_code, state_name, area_code, area_name,
supersector_code, supersector_name, industry_code,industry_name,
year, value)
# fix industry code
employment_ann$industry_code <- substr(employment_ann$industry_code,3,8)
# trim to rows containing top totals
employment_ann <- employment_ann %>%
filter(supersector_code=='00',industry_code=='000000')
# remove columns that only contain one value
employment_ann <- employment_ann %>%
select(-supersector_code, -supersector_name, -industry_code, -industry_name)
# create job index
employment_ann <- employment_ann %>%
left_join(employment_ann %>%
filter(year==2006) %>%
rename(value_2006 = value) %>%
select(area_code, value_2006),
by='area_code') %>%
mutate(job_index = value/value_2006)
# longitudinal clustering
employment_kml <- employment_ann %>%
select(area_code, area_name, year, job_index) %>%
spread(year, job_index)
employment_kml <- as.data.frame(employment_kml)
employment_cld <- cld(employment_kml,
timeInData = c(3:15),
time=c(2006:2018))
# in preparing for this post, I did a standard kml run, from that I picked 4 as
# the nubmer of clusters
kml(employment_cld, nbClusters=4, nbRedrawing=3,toPlot='none')
employment_kml$cluster = getClusters(employment_cld, 4)
employment_cluster <- employment_kml %>%
group_by(area_code) %>%
select(area_code, cluster)
# add cluster info to employment_ann
employment_ann <- left_join(employment_ann, employment_cluster, by='area_code')
# graphs
all_jobs_clustered <- employment_ann %>%
left_join(employment_ann %>%
group_by(year) %>%
summarise(mean_index = mean(job_index)),
by='year') %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster), alpha=.5) +
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann, area_code == '38300'),
size=1.5) +
geom_line(aes(x=year, y=mean_index, color='blue'), size=1) +
scale_color_manual(labels=c(A='Slightly Worse', B='Slightly Better', C='Much worse', D='Much better',blue='Metro average', yellow='Pittsburgh'),
values=c(A='pink',B='lightgreen',C='red',D='darkgreen',blue='blue',yellow='yellow'),
aesthetics='colour') +
scale_x_continuous(breaks=seq(2006, 2018,1)) +
labs(title = "Metro job growth",
y="Job growth index",
subtitle="(Average annual total nonfarm payroll employment indexed to 2006)",
x="") +
theme_minimal() +
theme(plot.title=element_text(size=24),
legend.position='bottom', legend.title=element_blank(),
legend.box.background = element_rect(fill='gray90')) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=1)))
animate(all_jobs_clustered + transition_reveal(year), end_pause = 20)
# graphs
all_jobs_clustered <- employment_ann %>%
left_join(employment_ann %>%
group_by(year) %>%
summarise(mean_index = mean(job_index)),
by='year') %>%
ggplot(aes(x=year, y=job_index)) +
geom_line(aes(group=area_code, color=cluster), alpha=.3) +
geom_line(aes(x=year, y=job_index, color='yellow'),
data=filter(employment_ann, area_code == '38300'),
size=1.5) +
geom_line(aes(x=year, y=mean_index, color='blue'), size=1) +
scale_color_manual(labels=c(A='Slightly Worse', B='Slightly Better', C='Much worse', D='Much better',blue='Metro average', yellow='Pittsburgh'),
values=c(A='pink',B='lightgreen',C='red',D='darkgreen',blue='blue',yellow='yellow'),
aesthetics='colour') +
scale_x_continuous(breaks=seq(2006, 2018,1)) +
labs(title = "Metro job growth",
y="Job growth index",
subtitle="(Average annual total nonfarm payroll employment indexed to 2006)",
x="") +
theme_minimal() +
theme(plot.title=element_text(size=24),
legend.position='bottom', legend.title=element_blank(),
legend.box.background = element_rect(fill='gray90')) +
guides(colour=guide_legend(override.aes=list(alpha=1, size=1)))
animate(all_jobs_clustered + transition_reveal(year), end_pause = 20)
blogdown:::serve_site()
blogdown:::new_post_addin()
library(tidyverse)
library(DT)
path_data_census <- 'C:/Users/bowli/Documents/data/Census/geo_files/'
national_names <- read_delim(paste0(path_data_census,'NationalFile/NationalFile_20191101.txt'),
delim='|',
col_types = cols(.default=col_character(),
ELEV_IN_M = col_double(),
ELEV_IN_FT = col_double()),
quote = "")
gut_count %>% nrow(filter(national_names,FEATURE_CLASs == 'gut'))
gut_count <- nrow(filter(national_names,FEATURE_CLASs == 'gut'))
View(national_names)
gut_count <- nrow(national_names[national_names$FEATURE_CLASs == 'gut',])
library(tidyverse)
library(DT)
path_data_census <- 'C:/Users/bowli/Documents/data/Census/geo_files/'
national_names <- read_delim(paste0(path_data_census,'NationalFile/NationalFile_20191101.txt'),
delim='|',
col_types = cols(.default=col_character(),
ELEV_IN_M = col_double(),
ELEV_IN_FT = col_double()),
quote = "")
gut_count <- nrow(national_names[national_names$FEATURE_CLASS == 'gut',])
gut_count <- nrow(national_names[national_names$FEATURE_CLASS == 'Gut',])
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
count()
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
count() %>%
arrange(desc(n))
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
count() %>%
arrange(desc(n)) %>%
top_n(n=10,wt=n)
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
top_n(n=10,wt=Number)
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
top_n(n=10,wt=Number) %>%
arrange(desc(Number))
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
top_n(n=20,wt=Number) %>%
arrange(desc(Number))
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
top_n(n=20,wt=Number) %>%
arrange(desc(Number)) %>%
datatable()
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
filter(Number > 1) %>%
arrange(desc(Number)) %>%
datatable()
gut_names <- national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number=n())
unique_names <- nrow(gut_names %>%
filter(Number==1))
unique_percent <- round(unique_names / gut_count,digits=3)
unique_percent <- round(unique_names / gut_count,digits=2)
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
filter(Number > 1) %>%
arrange(desc(Number)) %>%
datatable()
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
filter(Number > 1) %>%
arrange(desc(Number)) %>%
datatable(colnames=c('Name','Number'))
gut_names %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge')
gut_names %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = str_replace(FEATURE_NAME,'(historical)','')) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fourth, fifth) %>%
count()
gut_names %>%
filter(str_detect(FEATURE_NAME,'Crow'))
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,' (historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fourth, fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,' (historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,' (historical) ',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,' (historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
count()
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
group_by(fifth) %>%
summarise(number=n(),
len = length(fifth))
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(names_to='position')
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(names_to='position', values_to='name')
gut_names %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(names_to='position', values_to='name')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(names_to='position', values_to='name')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(cols=1:5, names_to='position', values_to='name')
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(cols=1:5, names_to='position', values_to='name') %>%
filter(!is.na(name)) %>%
group_by(name) %>%
summarise(Number = n())
national_names %>%
filter(FEATURE_CLASS == 'Gut') %>%
select(FEATURE_NAME) %>%
mutate(FEATURE_NAME = trimws(str_replace(FEATURE_NAME,'(historical)',''))) %>%
separate(FEATURE_NAME,into=c('first','second','third','fourth','fifth'),extra='merge') %>%
pivot_longer(cols=1:5, names_to='position', values_to='name') %>%
filter(!is.na(name)) %>%
group_by(name) %>%
summarise(Number = n()) %>%
arrange(desc(Number))
gut_names %>%
filter(length(FEATURE_NAME)==max(length(FEATURE_NAME)))
gut_names %>%
group_by(FEATURE_NAME) %>%
filter(length(FEATURE_NAME)==max(length(FEATURE_NAME)))
gut_names %>%
group_by(FEATURE_NAME) %>%
mutate(len = length(FEATURE_NAME)) %>%
filter(length(FEATURE_NAME)==max(len))
gut_names %>%
filter(nchar(FEATURE_NAME)==max(nchar(FEATURE_NAME)))
gut_names %>%
mtuate(FEATURE_NAME = str_replace(FEATURE_NAME, '(historical)','')) %>%
filter(nchar(FEATURE_NAME)==max(nchar(FEATURE_NAME)))
gut_names %>%
mutate(FEATURE_NAME = str_replace(FEATURE_NAME, '(historical)','')) %>%
filter(nchar(FEATURE_NAME)==max(nchar(FEATURE_NAME)))
gut_names %>%
mutate(FEATURE_NAME = str_replace(FEATURE_NAME, '(historical)','')) %>%
filter(nchar(FEATURE_NAME)==max(nchar(FEATURE_NAME)) | nchar(FEATURE_NAME)==min(nchar(FEATURE_NAME)))
national_names %>%
filter(FEATURE_CLASS=='Gut') %>%
group_by(FEATURE_NAME) %>%
summarise(Number = n()) %>%
filter(Number > 1) %>%
arrange(desc(Number)) %>%
datatable(colnames=c('Name','Number'))
gut_names %>%
filter(FEATURE_NAME == "Neo")
national_names %>%
filter(FEATURE_NAME == "Neo")
national_names %>%
filter(FEATURE_NAME == "Puerto Nuestra Senora de Dolores")
national_names %>%
filter(FEATURE_CLASS = "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
arrange(desc(Number)) %>%
datatable(colnames=c('State','Number'))
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
arrange(desc(Number)) %>%
datatable(colnames=c('State','Number'))
national_names %>%
filter(FEATURE_CLASS=='Gut', STATE_ALPHA=='PA')
path_common <- 'C:/Users/bowli/Documents/data/commonly_used/'
states <- read_csv(paste0(path_common,'state_abbreviations.csv'))
View(states)
states <- read_tsv(paste0(path_common,'state_abbreviations.csv'))
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreivation')) %>%
arrange(desc(Number)) %>%
select(State = state, Number) %>%
datatable(colnames=c('State','Number'))
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(State = state, Number) %>%
datatable(colnames=c('State','Number'))
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(abbrev=STATE_ALPHA, State = state, Number) %>%
datatable(colnames=c('abbrev', 'State','Number'))
add_states <- tibble(state=c('Federated States of Micronesia'),abbreviation=c('FM'))
states <- bind_rows(states,
add_states)
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(abbrev=STATE_ALPHA, State = state, Number) %>%
datatable(colnames=c('abbrev', 'State','Number'))
add_states <- tibble(state=c('Federated States of Micronesia','Palau'),abbreviation=c('FM','PW'))
states <- bind_rows(states,
add_states)
national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(abbrev=STATE_ALPHA, State = state, Number) %>%
datatable(colnames=c('abbrev', 'State','Number'))
add_states <- tibble(state=c('Federated States of Micronesia','Palau'),abbreviation=c('FM','PW'))
states <- bind_rows(states,
add_states)
name_count <- national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(abbrev=STATE_ALPHA, State = state, Number)
View(name_count)
states <- read_tsv(paste0(path_common,'state_abbreviations.csv'))
add_states <- tibble(state=c('Federated States of Micronesia','Palau'),abbreviation=c('FM','PW'))
states <- bind_rows(states,
add_states)
name_count <- national_names %>%
filter(FEATURE_CLASS == "Gut") %>%
group_by(STATE_ALPHA) %>%
summarise(Number = n()) %>%
left_join(states,by=c('STATE_ALPHA'='abbreviation')) %>%
arrange(desc(Number)) %>%
select(abbrev=STATE_ALPHA, State = state, Number)
name_count %>%
filter()
name_count %>%
select(State, Number) %>%
datatable()
